# Copyright (C) 2019 ruslan.lopez
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

JAVA_SEARCHING=List<String> allGroups = new ArrayList<>();\ntry '{'\n   Matcher m = Pattern.compile(\"{0}\").matcher(\"{1}\");\n   int groupsNum = m.groupCount();\n   while (m.find()) '{'\n       for (int i = 1; i <= groupsNum; i++) '{'\n           try '{'\n               String group = m.group(i);\n               allGroups.add(group);\n           '}' catch (IllegalStateException ise) '{'\n               allGroups.add(\"No Matches\");\n           '}'\n       '}'\n   '}'\n'}' catch (PatternSyntaxException pse) '{'\n   allGroups.add(pse.getMessage());\n'}'
KOTLIN_SEARCHING=val allGroups = ArrayList()\ntry '{'\n    val m = Pattern.compile(\"{0}\").matcher(\"{1}\")\n   val groupsNum = m.groupCount()\n   while (m.find()) '{'\n       for (i in 1..groupsNum) '{'\n           try '{'\n               val group = m.group(i)\n               allGroups.add(group)\n           '}' catch (ise:IllegalStateException) '{'\n               allGroups.add(\"No Matches\")\n           '}'\n       '}'\n   '}'\n'}' catch (pse:PatternSyntaxException) '{'\n   allGroups.add(pse.getMessage())\n'}'
GROOVY_SEARCHING=List<String> allGroups = new ArrayList<>() \ntry '{' \n    def m = Pattern.compile("{0}").matcher("{1}") \n    def groupsNum = m.groupCount() \n    while (m.find()) '{' \n        for (int i = 1; i <= groupsNum; i++) '{' \n            try '{' \n                String group = m.group(i) \n                allGroups.add(group) \n            '}' catch (IllegalStateException ise) '{' \n                allGroups.add("No Matches") \n            '}' \n        '}' \n    '}' \n'}' catch (PatternSyntaxException pse) '{' \n    allGroups.add(pse.getMessage()) \n'}'
JAVA_SPLIT=Pattern pattern = Pattern.compile(\"{0}\");\nString[] splitted= pattern.split(\"{1}\",0);
KOTLIN_SPLIT=var pattern = Pattern.compile(\"{0}\")\nvar splitted= pattern.split(\"{1}\",0)
GROOVY_SPLIT=Pattern pattern = Pattern.compile("{0}") \nString[] splitted= pattern.split("{1}",0)
JAVA_REPLACE=Pattern pattern = Pattern.compile(\"{0}\");\nString replaced = pattern.matcher(\"{1}\").replaceAll(\"{2}\");
KOTLIN_REPLACE=var pattern = Pattern.compile(\"{0}\")\nvar replaced = pattern.matcher(\"{1}\").replaceAll(\"{2}\")
GROOVY_REPLACE=Pattern pattern = Pattern.compile("{0}") \nString replaced = pattern.matcher("{1}").replaceAll("{2}")
JAVA_VALIDATION=Pattern pattern = Pattern.compile(\"{0}\");\nboolean isValid = pattern.matcher(\"{1}\").matches();
KOTLIN_VALIDATION=var pattern = Pattern.compile(\"{0}\")\nvar isValid = pattern.matcher(\"{1}\").matches()
GROOVY_VALIDATION=Pattern pattern = Pattern.compile("{0}") \nboolean isValid = pattern.matcher("{1}").matches()
